#!/usr/bin/env python3
"""
Usage:
  word-clique1 [options] [<file>...]

Options:
  --unique FILE         Write anagram unique words to FILE
  -l --length INT       Word length [Default: 5]
  -U --unbuffered       Line buffered (not default buffered)
  -T --no-tracker       No tracker
  --vowels              Only accept words with at least 1 vowel
  -h --help             Show this screen.
  --version             Show version.
"""
import sys
import io
from pathlib import Path
from operator import ior
from functools import reduce
from time import perf_counter as monotonic
from dataclasses import dataclass, field
from typing import Set, Dict, List, Iterable, Final

# External modules
from docopt import docopt	# type: ignore
from rich.progress import track

FILENAME = Path("~/Downloads/words.txt").expanduser()
WORD_LENGTH = 5
DEBUG = True
VOWELS: Final = set("aeiouy")

@dataclass
class Clique:
    word_length: int = WORD_LENGTH
    letter_set:	Set[str]         = field(init = False, default_factory = set)
    cwords: Dict[str, List[str]] = field(init = False, default_factory = dict)
    letters: str		 = field(init = False)
    bwords: Dict[int, str]	 = field(init = False)
    bword_list: List[int]	 = field(init = False)

    @property
    def nr_words(self) -> int:
        return len(self.letter_set) // self.word_length

    def ingest(self, files: Iterable[str], vowels: bool = False) -> None:
        words_seen: Set[str] = set()
        for file in files:
            with open(file) as handle:
                # for word in task(handle):
                for word in handle:
                    word = word.strip()
                    if len(word) != self.word_length or not word.isalpha():
                        continue
                    cset = set(word.lower())
                    if len(cset) != self.word_length or word in words_seen:
                        continue
                    if vowels and not cset & VOWELS:
                        continue
                    words_seen.add(word)
                    cword = "".join(sorted(cset))
                    if cword not in self.cwords:
                        self.cwords[cword] = []
                        self.letter_set |= cset
                    self.cwords[cword].append(word)
        print(f"{len(words_seen)} words with {self.word_length} letters, {len(self.cwords)} unique anagrams", file = sys.stderr)

    def unique_to_file(self, unifile: str) -> None:
        with open(unifile, "w") as uni_handle:
            # for words in track(self.cwords.values()):
            for words in self.cwords.values():
                print(words[0], file = uni_handle)

    def word_from_bits(self, bword: int) -> str:
        return self.cwords[self.bwords[bword]][0]

    def words_from_bits(self, bwords: Iterable[int]) -> List[str]:
        return list(map(self.word_from_bits, bwords))

    def pre_analyze(self, vowels: bool = False) -> None:
        self.letters = "".join(sorted(self.letter_set))
        print(f"{len(self.letters)} letters:", self.letters, file=sys.stderr)

        # Make a letter bitmap for all words
        letter_bits = { letter: 1 << i for i, letter in enumerate(self.letters) }
        self.bwords = { reduce(ior, (letter_bits[l] for l in cword)): cword for cword in self.cwords }

        if vowels:
            used_vowels = self.letter_set & VOWELS
            max_vowels = len(used_vowels) + 1 - self.nr_words
            if max_vowels < self.word_length:
                if max_vowels < 1:
                    print("Pruning all anagrams since not enough vowels exist",
                          file = sys.stderr)
                    self.bwords = {}
                else:
                    # Instead of removing excess bwords we could modify the
                    # bwords generator which would be more efficient. I like
                    # this better though. It avoids code duplication and is easy
                    # to understand
                    bvowels = reduce(ior, (letter_bits[l] for l in used_vowels))
                    excess_vowels = [bword for bword, cword in self.bwords.items() if (bword & bvowels).bit_count() > max_vowels]
                    print("Pruning %s anagram%s with too many vowels" % (len(excess_vowels), "" if len(excess_vowels) == 1 else "s"), file = sys.stderr)
                    for bword in excess_vowels:
                        del self.bwords[bword]

        # Starting with relatively isolated nodes is faster
        # Starting with very connected nodes is a disaster
        bword_keys = { bword: sum(b & bword == 0 for b in self.bwords) for bword in self.bwords}
        # print(bword_keys)
        self.bword_list = sorted(self.bwords, key = lambda x: bword_keys[x])
        # print(list(map(self.word_from_bits, self.bword_list)), sys=stderr)

    def analyze(self, *, base_time: float = None, track = None) -> int:
        if not self.bword_list:
            return 0

        _base_time: float = monotonic() if base_time is None else base_time

        nr_words = self.nr_words
        selected = [0] * nr_words
        nr_solutions = 0

        def explore(i, candidates, used_letters):
            nonlocal nr_solutions
            i1 = i+1
            left = nr_words - i1

            if left:
                # Check how many letters we will get from the final words in the
                # best case. No point checking candidates beyond that point
                bits_needed = self.word_length * (left+1)
                bits = 0
                for j, bword in enumerate(reversed(candidates)):
                    bits |= bword
                    if bits.bit_count() >= bits_needed:
                        break
                # print(f"{len(candidates)=} {j=} {left=}")
            else:
                # for left == 0 all candidates will pass, so no need to test
                j = 0

            loop = track(range(len(candidates)-j)) if i == 0 and track else range(len(candidates)-j)
            for j in loop:
                bword = candidates[j]
                selected[i] = bword
                # print(f"{'  '*i}explore({i=}, {list(map(self.word_from_bits, selected[:i+1]))})")
                if left == 0:
                    elapsed = monotonic() - _base_time
                    nr_solutions += 1
                    print(f"{elapsed:7.1f}s: {self.words_from_bits(selected)} {nr_solutions:6d}")
                    continue

                used = used_letters | bword
                possible = [bword2 for bword2 in candidates[j+1:] if bword2 & used == 0]
                if len(possible) < left:
                    continue
                explore(i1, possible, used)

        explore(0, self.bword_list, 0)
        return nr_solutions

if __name__ == '__main__':
    args = docopt(__doc__, version=f"word-clique 1.000")

    if args["--unbuffered"] and isinstance(sys.stdout, io.TextIOWrapper):
        sys.stdout.reconfigure(line_buffering = True)

    start_time = monotonic()
    clique = Clique(int(args["--length"]))

    files: List[str] = args["<file>"] or [FILENAME]
    vowels: bool = args["--vowels"]
    clique.ingest(files, vowels = vowels)
    load_time = monotonic()
    print(f"Load time: {load_time-start_time:.1f}s", file = sys.stderr)

    unifile = args["--unique"]
    if unifile is not None:
        clique.unique_to_file(unifile)
        unique_time = monotonic()
        print(f"Write unique: {unique_time-load_time:.1f}s", file = sys.stderr)
    else:
        unique_time = load_time

    clique.pre_analyze(vowels = vowels)
    prepare_time = monotonic()
    print(f"Prepare: {prepare_time-unique_time:.1f}s", file = sys.stderr)

    no_tracker = args["--no-tracker"]
    n = clique.analyze(base_time = prepare_time, track = None if no_tracker else lambda x: track(x, transient = True, auto_refresh=False, description = ""))
    finish_time = monotonic()
    print(f"Finish: {finish_time-prepare_time:.1f}s, {n} solutions", file = sys.stderr)
